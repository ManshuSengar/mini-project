 const [id, setId] = useState<any>(userData?.id);
  const { data: externalRatingData, isLoading } = useGetExternalRatingByIdQuery(id);
  const [addExternalRating] = useAddExternalRatingMutation();
  const [updateExternalRating] = useUpdateExternalRatingMutation();



  const handleSubmit = async (values: any) => {
    try {


      console.log("values--> ", values);
      if (!userData?.id) {
        await addExternalRating(values.ratings).unwrap();
      } else {
        await updateExternalRating(values.ratings).unwrap();
      }
    } catch (err) {
      console.error("Error saving data:", err);
    }
  };


  const profileInitialValues = {
    applId: "",
    covenantBreach: "",
    pendingComl: "",
    detailsOfGroup: "",
    compDetails: "",
    extRatHoldComp: "",
    taggedRating: "",
    lowestRating: "",
    ratingMovement: "",
    strength: "",
    weakness: "",
    weaknessComments: "",
    upwardFactors: "",
    downwardFactors: "",
    downFactorsComments: "",
    intRatingComments: "",
    saveStatus: "",
    ratingExtract: ""
  }


 <div className="wrap-inner-table">
          <Table sx={{ minWidth: 650 }} aria-label="simple table">
            <TableHead>
              <TableRow>
                <TableCell><b>Tagged Rating</b></TableCell>
                <TableCell><b>Lowest Rating</b></TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              <TableRow>
                <TableCell>
                  <FormControl fullWidth>
                    <TextBoxField label="" name="taggedRating" />
                  </FormControl>
                </TableCell>
                <TableCell>
                  <FormControl fullWidth>
                    <TextBoxField label="" name="lowestRating" />
                  </FormControl>
                </TableCell>
              </TableRow>
            </TableBody>
          </Table>
        </div>
        <div className="wrap-inner-table">
          <Table sx={{ minWidth: 650 }} aria-label="simple table">
            <TableHead>
              <TableRow>
                <TableCell><b>Grading for MFI</b></TableCell>
                <TableCell><b>COCO for MFI</b></TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              <TableRow>
                <TableCell>
                  <FormControl fullWidth>
                    <TextBoxField label="" name="" />
                  </FormControl>
                </TableCell>
                <TableCell>
                  <FormControl fullWidth>
                    <TextBoxField label="" name="" />
                  </FormControl>
                </TableCell>
              </TableRow>
            </TableBody>
          </Table>
        </div>
        <Grid spacing={2}
          padding={4}
          container
          className='form-grid'>
          <Grid item xs={12} sm={6} md={3} lg={3}>
            External Credit Rating of Holding Company
          </Grid>
          <Grid item xs={12} sm={6} md={9} lg={9}>
            <TextBoxField
              label="External Credit Rating of Holding Company"
              name="extRatHoldComp"
            />
          </Grid>
        </Grid>
        <Grid
          spacing={2}
          padding={4}
          container
          className='form-grid'
        >
          <Grid item xs={12} sm={6} md={3} lg={3}>
            Rating Movement in last 3 years
          </Grid>
          <Grid item xs={12} sm={6} md={3} lg={9}>
            <TextBoxField label="Rating Movement in last 3 years" name="ratingMovement" />
          </Grid>
        </Grid>
        <div className="wrap-inner-table">
          <Table sx={{ minWidth: 650 }} aria-label="simple table">
            <TableHead>
              <TableRow>
                <TableCell><b>Strength</b></TableCell>
                <TableCell><b>Weakness</b></TableCell>
                <TableCell><b>Comments on Weaknesses</b></TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              <TableRow>
                <TableCell>
                  <div className="wrap-richtext">
                    <RichTextField label="" name="strength" />
                  </div>
                </TableCell>
                <TableCell>
                  <div className="wrap-richtext">
                    <RichTextField label="" name="weakness" />
                  </div>
                </TableCell>
                <TableCell>
                  <div className="wrap-richtext">
                    <RichTextField label="" name="weaknessComments" />
                  </div>
                </TableCell>
              </TableRow>
            </TableBody>
          </Table>
        </div>
        <Grid
          spacing={2}
          padding={4}
          container
          className='form-grid'
        >
          <Grid item xs={12} sm={6} md={3} lg={12}>
            <b>Rating Sensitivity Factors</b>
          </Grid>
          <Grid item xs={12} sm={12} md={12} lg={12}>
            <div className="wrap-inner-table mt-0">
              <Table sx={{ minWidth: 650 }} aria-label="simple table">
                <TableHead>
                  <TableRow>
                    <TableCell><b>Upward Factors</b></TableCell>
                    <TableCell><b>Downward Factors</b></TableCell>
                    <TableCell><b>Comments on Downward Factors</b></TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  <TableRow>
                    <TableCell>
                      <div className="wrap-richtext">
                        {/* <ThemeProvider theme={myTheme}>
                          <MUIRichTextEditor label="" onSave={save} />
                        </ThemeProvider> */}
                        <RichTextField label="" name="upwardFactors" />
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="wrap-richtext">
                        {/* <ThemeProvider theme={myTheme}>
                          <MUIRichTextEditor label="" onSave={save} />
                        </ThemeProvider> */}
                        <RichTextField label="" name="downwardFactors" />
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="wrap-richtext">
                        {/* <ThemeProvider theme={myTheme}>
                          <MUIRichTextEditor label="" onSave={save} />
                        </ThemeProvider> */}

                        <RichTextField label="" name="downFactorsComments" />
                      </div>
                    </TableCell>
                  </TableRow>
                </TableBody>
              </Table>
            </div>
          </Grid>
        </Grid>


import React from 'react';
import Grid from "@mui/material/Grid";
import Typography from "@mui/material/Typography";
import { getIn, useFormikContext } from "formik";
import MUIRichTextEditor from 'mui-rte';
import { createTheme, ThemeProvider } from '@mui/material/styles';
import { convertToRaw, convertFromRaw, EditorState } from 'draft-js';

const theme = createTheme({
    // You can customize the theme for MUIRichTextEditor here
});

export const RichTextField = (props: {
    label: string;
    name: string;
}) => {
    const { setFieldValue, values, touched, errors } = useFormikContext() || {};

    // const handleChange: any = (state: EditorState) => {
    //     const contentState = state.getCurrentContent();
    //     const rawContent = convertToRaw(contentState);
    //     console.log("rawContent--> ", rawContent);
    //     setFieldValue(props.name, JSON.stringify(state));
    // };

    const initialValue = React.useMemo(() => {
        const value = getIn(values, props.name);
        console.log("valuetext field --> ", value);
        if (value) {
            try {
                const content = JSON.stringify(
                    convertToRaw(value.getCurrentContent())
                );
                setFieldValue(props.name, content);
            } catch (error) {
                console.error("Error parsing initial value:", error);
                return '';
            }
        }
        return '';
    }, [values, props.name]);

    return (
        <Grid item xs={12}>
            <ThemeProvider theme={theme}>
                <Typography variant="subtitle1" gutterBottom>
                    {props.label}
                </Typography>
                <MUIRichTextEditor
                    label={`Enter ${props.label.toLowerCase()} here...`}
                    // onChange={handleChange}
                    onChange={value => {
                        const content = JSON.stringify(
                            convertToRaw(value.getCurrentContent())
                        );
                        setFieldValue(props.name, content);
                    }}
                    inlineToolbar={true}
                    // defaultValue={getIn(values, props.name)}
                     defaultValue={initialValue}
                    // defaultValue={getIn(values, props.name)}
                />
            </ThemeProvider>
            <Grid item xs={12}>
                <Typography
                    color="error"
                    variant="subtitle2"
                    gutterBottom
                    component="span"
                    className="mybooking_error"
                >
                    {getIn(touched, props.name) && getIn(errors, props.name) &&
                        JSON.stringify(getIn(errors, props.name)).replaceAll('"', "")}
                </Typography>
            </Grid>
        </Grid>
    );
};

import { Formik, Form, useFormikContext } from "formik";
import { debounce } from "lodash";
import { useCallback, useEffect, useState } from "react";

const AutoSave = ({ debounceMs = 2000 }) => {
    const formik = useFormikContext();
    // const [lastSaved, setLastSaved] = useState<any>(null);
    const debouncedSubmit = useCallback(
        debounce(async () => {
            if (formik.isValid && formik.dirty) {
                try {
                    await formik.submitForm();
                    // setLastSaved(new Date());
                } catch (error) {
                    console.error('Error during autosave:', error);
                }
            } 
        }, debounceMs),
        [formik.submitForm, formik.isValid, formik.dirty]
    );

    useEffect(() => {
        debouncedSubmit();
        return () => {
            debouncedSubmit.cancel();
        };
    }, [formik.values, debouncedSubmit]);
    // return lastSaved ? <p>Last autosaved: {lastSaved.toLocaleTimeString()}</p> : null;

    return <></>;
};


export default AutoSave;
