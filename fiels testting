import { FormControl, Table, TableBody, TableCell, TableHead, TableRow, TextField } from "@mui/material";
import { useEffect } from "react";

const Disclosures = () => {

  useEffect(() => {
  }, []);

  return (
    <>
      <div className="wrap-accordian custome-form">
        <div className='custome-form'>
          <div className="wrap-inner-table">
            <Table sx={{ minWidth: 650 }} aria-label="simple table">
              <TableHead>
                <TableRow>
                  <TableCell><b>Particulars</b></TableCell>
                  <TableCell><b>FY
                    <TextField className="ms-2" placeholder="" size="small" type="text" />
                  </b></TableCell>
                  <TableCell><b>FY<TextField className="ms-2" placeholder="" size="small" type="text" /></b></TableCell>
                  <TableCell><b>FY<TextField className="ms-2" placeholder="" size="small" type="text" /></b></TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                <TableRow>
                  <TableCell>
                    Exposure to real estate
                  </TableCell>
                  <TableCell>
                    <FormControl fullWidth>
                      <TextField placeholder="" size="small" type="text" />
                    </FormControl>
                  </TableCell>
                  <TableCell>
                    <FormControl fullWidth>
                      <TextField placeholder="" size="small" type="text" />
                    </FormControl>
                  </TableCell>
                  <TableCell>
                    <FormControl fullWidth>
                      <TextField placeholder="" size="small" type="text" />
                    </FormControl>
                  </TableCell>
                </TableRow>
                <TableRow>
                  <TableCell>
                    Exposure to capital market
                  </TableCell>
                  <TableCell>
                    <FormControl fullWidth>
                      <TextField placeholder="" size="small" type="text" />
                    </FormControl>
                  </TableCell>
                  <TableCell>
                    <FormControl fullWidth>
                      <TextField placeholder="" size="small" type="text" />
                    </FormControl>
                  </TableCell>
                  <TableCell>
                    <FormControl fullWidth>
                      <TextField placeholder="" size="small" type="text" />
                    </FormControl>
                  </TableCell>
                </TableRow>
                <TableRow>
                  <TableCell>
                    Contingent Liabilities Penalty by RBI
                  </TableCell>
                  <TableCell>
                    <FormControl fullWidth>
                      <TextField placeholder="" size="small" type="text" />
                    </FormControl>
                  </TableCell>
                  <TableCell>
                    <FormControl fullWidth>
                      <TextField placeholder="" size="small" type="text" />
                    </FormControl>
                  </TableCell>
                  <TableCell>
                    <FormControl fullWidth>
                      <TextField placeholder="" size="small" type="text" />
                    </FormControl>
                  </TableCell>
                </TableRow>
                <TableRow>
                  <TableCell>
                    Adverse action by Statutory Auditor/ Bank/FI
                  </TableCell>
                  <TableCell>
                    <FormControl fullWidth>
                      <TextField placeholder="" size="small" type="text" />
                    </FormControl>
                  </TableCell>
                  <TableCell>
                    <FormControl fullWidth>
                      <TextField placeholder="" size="small" type="text" />
                    </FormControl>
                  </TableCell>
                  <TableCell>
                    <FormControl fullWidth>
                      <TextField placeholder="" size="small" type="text" />
                    </FormControl>
                  </TableCell>
                </TableRow>
                <TableRow>
                  <TableCell>
                    Arrears of Statutory Dues
                  </TableCell>
                  <TableCell>
                    <FormControl fullWidth>
                      <TextField placeholder="" size="small" type="text" />
                    </FormControl>
                  </TableCell>
                  <TableCell>
                    <FormControl fullWidth>
                      <TextField placeholder="" size="small" type="text" />
                    </FormControl>
                  </TableCell>
                  <TableCell>
                    <FormControl fullWidth>
                      <TextField placeholder="" size="small" type="text" />
                    </FormControl>
                  </TableCell>
                </TableRow>
                <TableRow>
                  <TableCell>
                    Exposure to Sensitive Sectors
                  </TableCell>
                  <TableCell>
                    <FormControl fullWidth>
                      <TextField placeholder="" size="small" type="text" />
                    </FormControl>
                  </TableCell>
                  <TableCell>
                    <FormControl fullWidth>
                      <TextField placeholder="" size="small" type="text" />
                    </FormControl>
                  </TableCell>
                  <TableCell>
                    <FormControl fullWidth>
                      <TextField placeholder="" size="small" type="text" />
                    </FormControl>
                  </TableCell>
                </TableRow>
              </TableBody>
            </Table>
          </div>
        </div>
      </div>
    </>
  )
}

export default Disclosures;

[
  {
    "applId": "string",
    "particulars": "string",
    "status": "string",
    "tminus1Val": "string",
    "tminus2Val": "string",
    "tval": "string"
  }
]

import { createApi } from "@reduxjs/toolkit/query/react";
import { crudApiTemplate, customBaseQuery } from "../../app/commonApi";

const entity = "appr/losDisclosures";
const path = `disclosuresApi`;
const tags = [entity];

export const discussionLendersApi = createApi({
    reducerPath: path,
    baseQuery: customBaseQuery,
    tagTypes: tags,
    endpoints: (builder) => ({
        addDisclosuresApi: builder.mutation<any, any>({
            query: (body) => crudApiTemplate(entity).addItem(body),
            invalidatesTags: tags,
        }),
        getDisclosuresById: builder.query<any, number>({
            query: (id) => crudApiTemplate(entity).getItem(12345),
            transformResponse: (response: any) => {
                return {
                    lenders: response
                }
            },
            providesTags: tags,
        }),
        updateDisclosures: builder.mutation<any, any>({
            query: (body) => crudApiTemplate(entity).updateItem(body),
            invalidatesTags: tags,
        }),
    }),
});

export const {
    useAddDisclosuresApiMutation,
    useGetDisclosuresByIdQuery,
    useUpdateDisclosuresMutation,
} = discussionLendersApi;


import React from 'react';
import { Formik, Form, FieldArray } from 'formik';
import * as Yup from 'yup';
import { Table, TableBody, TableCell, TableHead, TableRow, FormControl, Button, Grid } from '@mui/material';
import { useAddDiscussionLendersMutation, useUpdateDiscussionLendersMutation, useGetDiscussionLendersByIdQuery } from '../../../features/due-diligence/discussionLendersApi';
import AutoSave from '../../../components/framework/AutoSave'; // Adjust the import path as needed
import { TextBoxField } from '../../../components/framework/TextBoxField';

const DiscussionLenders = ({ userData }: any) => {
  const [addDiscussionLenders, addResponse] = useAddDiscussionLendersMutation();
  const [updateDiscussionLenders, updateResponse] = useUpdateDiscussionLendersMutation();
  const { data: discussionLendersData, isLoading, isError } = useGetDiscussionLendersByIdQuery(12345); // Replace with actual ID

  const initialValues = {
    lenders: [
      {
        applId: "12345",
        slNo: 1,
        lenderName: "",
        exposure: "",
        acctStatus: "",
        overallConduct: "",
        name: "",
        desg: "",
        mobile: "",
      },
      {
        applId: "12345",
        slNo: 2,
        lenderName: "",
        exposure: "",
        acctStatus: "",
        overallConduct: "",
        name: "",
        desg: "",
        mobile: "",
      },
      {
        applId: "12345",
        slNo: 3,
        lenderName: "",
        exposure: "",
        acctStatus: "",
        overallConduct: "",
        name: "",
        desg: "",
        mobile: "",
      }
    ],
  };

  const validationSchema = Yup.object().shape({
    lenders: Yup.array().of(
      Yup.object().shape({
        lenderName: Yup.string().required("Lender name is required"),
        exposure: Yup.string().required("Exposure is required"),
        acctStatus: Yup.string().required("Account status is required"),
        overallConduct: Yup.string().required("Overall conduct is required"),
        name: Yup.string().required("Name is required"),
        desg: Yup.string().required("Designation is required"),
        mobile: Yup.string().required("Mobile is required"),
      })
    )
  });

  const handleSubmit = async (values: any) => {
    try {
      await updateDiscussionLenders(values.lenders).unwrap();
    } catch (err) {
      console.error("Error saving discussion lenders:", err);
    }
  };

  if (isLoading) return <h6>Loading... </h6>;
  return (
    <div className="wrap-accordian custome-form">
      <Formik
        initialValues={discussionLendersData && discussionLendersData?.lenders && discussionLendersData?.lenders.length > 0 ? discussionLendersData : initialValues}
        onSubmit={handleSubmit}
        validationSchema={validationSchema}
        validateOnChange={false}
        validateOnBlur={true}
      >
        {({ values }) => (
          <Form>
            <AutoSave debounceMs={2000} />
            <FieldArray name="lenders">
              {() => (
                <div className="wrap-inner-table">
                  <Table sx={{ minWidth: 650 }} aria-label="simple table">
                    <TableHead>
                      <TableRow>
                        <TableCell><b>Particulars</b></TableCell>
                        {values?.lenders?.map((lender: any, index: number) => (
                          <TableCell key={index}>
                            <TextBoxField
                              name={`lenders.${index}.lenderName`}
                              label={`Bank${index + 1}`}
                            />
                          </TableCell>
                        ))}
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      <TableRow>
                        <TableCell>Exposure (` crore) / Lender Position</TableCell>
                        {values?.lenders?.map((lender: any, index: number) => (
                          <TableCell key={index}>
                            <TextBoxField name={`lenders.${index}.exposure`} label='' />
                          </TableCell>
                        ))}
                      </TableRow>
                      <TableRow>
                        <TableCell>Account status</TableCell>
                        {values?.lenders?.map((lender: any, index: number) => (
                          <TableCell key={index}>
                            <TextBoxField name={`lenders.${index}.acctStatus`} label='' />
                          </TableCell>
                        ))}
                      </TableRow>
                      <TableRow>
                        <TableCell>Overall Conduct of Account</TableCell>
                        {values?.lenders?.map((lender: any, index: number) => (
                          <TableCell key={index}>
                            <TextBoxField name={`lenders.${index}.overallConduct`} label='' />
                          </TableCell>
                        ))}
                      </TableRow>
                      <TableRow>
                        <TableCell colSpan={4}>
                          <b className="text-center">Contact details </b>
                        </TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell>Name:</TableCell>
                        {values?.lenders?.map((lender: any, index: number) => (
                          <TableCell key={index}>
                            <TextBoxField name={`lenders.${index}.name`} label='' />
                          </TableCell>
                        ))}
                      </TableRow>
                      <TableRow>
                        <TableCell>Designations:</TableCell>
                        {values?.lenders?.map((lender: any, index: number) => (
                          <TableCell key={index}>
                            <TextBoxField name={`lenders.${index}.desg`} label='' />
                          </TableCell>
                        ))}
                      </TableRow>
                      <TableRow>
                        <TableCell>Contact detail:</TableCell>
                        {values?.lenders?.map((lender: any, index: number) => (
                          <TableCell key={index}>
                            <TextBoxField name={`lenders.${index}.mobile`} label='' />
                          </TableCell>
                        ))}
                      </TableRow>
                    </TableBody>
                  </Table>
                </div>
              )}
            </FieldArray>
          </Form>
        )}
      </Formik>
    </div>
  );
};

export default DiscussionLenders;
