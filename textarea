import { debounce } from 'lodash';
const AutoSave = ({ debounceMs = 1000 }) => {
  const formik = useFormikContext();
  const [lastSaved, setLastSaved] = useState<any>(null);
  const debouncedSubmit = useCallback(
    debounce(async () => {
      if (formik.isValid && formik.dirty) {
        try {
          await formik.submitForm();
          setLastSaved(new Date());
        } catch (error) {
          console.error('Error during autosave:', error);
        }
      }
    }, debounceMs),
    [formik.submitForm, formik.isValid, formik.dirty]
  );

  useEffect(() => {
    debouncedSubmit();
    return () => {
      debouncedSubmit.cancel();
    };
  }, [formik.values, debouncedSubmit]);

  return lastSaved ? <p>Last autosaved: {lastSaved.toLocaleTimeString()}</p> : null;
};



const ExecutiveSummery = () => {
  const [expanded, setExpanded] = React.useState('');
  const textRef2 = useRef<any>();
  const textRef1 = useRef<any>();
  const textRef3 = useRef<any>();
  const textRef4 = useRef<any>();
  const textRef5 = useRef<any>();
  const textRef6 = useRef<any>();
  const onOpenChange = (panel: any) => (event: React.SyntheticEvent, isExpanded: any) => {
    setExpanded(isExpanded ? panel : false);
  };

  const [addExecutiveSummary, response] = useAddExecutiveSummaryMutation();
  const [errorMessage, setErrorMessage] = useState<any>("");

  const [id, setId] = useState<number>(12345);
  const { data: executiveData, isLoading, isFetching } = useGetExecutiveSummaryByIdQuery(id);

  const initialValues = {
    nbfcName: '',
    pastAssociation: '',
    briefBackground: '',
    promotor: '',
    extRating: '',
    ramRatingGrade: '',
    internalScore: '',
    productOffered: '',
    internalRatingScore: ''
  };


  const validationSchema = Yup.object().shape({
    nbfcName: Yup.string().required("Name of Borrower is required"),
    // businessNature: Yup.string().required("Nature of Business is required"),

  });


  const onChangeHandler = function (e: SyntheticEvent, refName: any) {
    const target = e.target as HTMLTextAreaElement;
    refName.current.style.height = "60px";
    refName.current.style.height = `${target.scrollHeight}px`;
  };
  const handleSubmit = async (values: any) => {
    try {
      console.log("hello1");
      await addExecutiveSummary(values).unwrap();
    } catch (err) {
      console.error("Error saving data:", err);
    }
  };
  if (isLoading) return <h6>Loading... </h6>

  return (
    <>
      <div className='custome-form'>
        <div className='custome-form'>
          <div className='custome-form'>
            <Formik
              initialValues={initialValues}
              onSubmit={handleSubmit}
              validationSchema={validationSchema}
              validateOnChange={false}
              validateOnBlur={true}
            >
              {({ values, setFieldValue, handleChange }) => {
                return (
                  <Form>
                    <AutoSave debounceMs={1000} />
                    <Grid spacing={2} padding={4} container className='form-grid'>
                      <Grid item xs={12} sm={6} md={6} lg={6}>
                        <TextBoxField
                          label="Name of the NBFC"
                          name="nbfcName"
                        />
                      </Grid>
                      <Grid item xs={12} sm={6} md={6} lg={6}>
                        <FormControl fullWidth>
                          <InputLabel className="select-label" id="eligibility">Past association with SIDBI</InputLabel>
                          <Select
                            labelId="eligibility"
                            id="pastAssociate"
                            label="Past association with SIDBI"
                            size="small"
                            value={values?.pastAssociation}
                            name="pastAssociation"
                            onChange={handleChange}
                          >
                            <MenuItem value="New to Business">New to Business</MenuItem>
                            <MenuItem value="Existing to Business">Existing to Business</MenuItem>
                            <MenuItem value="Past to Business">New to Business</MenuItem>
                          </Select>
                        </FormControl>
                      </Grid>

                      <Grid item xs={12} sm={12} md={12} lg={12}>
                        <TextAreaField
                          label="Brief background of NBFC/NBFC-MFI"
                          name="briefBackground"
                        />
                      </Grid>
                      <Grid item xs={12} sm={6} md={6} lg={6}>
                        <TextAreaField label="Promoter" name="promotor" />
                      </Grid>
                      <Grid item xs={12} sm={6} md={6} lg={6}>
                        <TextAreaField label="External rating detail" name="extRating" />
                      </Grid>
                      <Grid item xs={12} sm={12} md={12} lg={12}>
                        <Divider className='my-1' textAlign="left">
                          <b>Internal Rating Details </b>
                        </Divider>
                      </Grid>
                      <Grid item xs={12} sm={6} md={6} lg={6}>
                        <TextBoxField
                          label="Internal Score"
                          name="internalRatingScore"
                        />
                      </Grid>
                      <Grid item xs={12} sm={6} md={6} lg={6}>
                        <TextBoxField
                          label="RAM Rating Grade"
                          name="ramRatingGrade"
                        />
                      </Grid>
                      <Grid item xs={12} sm={12} md={12} lg={12}>
                        <Divider className='my-1' textAlign="left">
                          <b>Product offered</b>
                        </Divider>
                      </Grid>
                      <Grid item xs={12} sm={12} md={12} lg={12}>
                        <TextAreaField
                          label="Product offered"
                          name="productOffered"
                        />
                      </Grid>
                      <Grid item xs={12} textAlign="right">
                        <Button type="submit" size="small"
                          className="text-capitalize" variant="contained" color="primary">
                          Save
                        </Button>
                      </Grid>
                    </Grid>
                  </Form>
                );
              }}
            </Formik>
          </div>
        </div>
