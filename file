import { FormControl, Grid, IconButton, Table, TableBody, Button, TableCell, TableHead, TableRow, TextField } from "@mui/material"
import { TextBoxField } from "../../../components/framework/TextBoxField";
import DeleteIcon from '@mui/icons-material/Delete';

import { useState } from "react";
import MUIRichTextEditor from 'mui-rte';
import { createTheme, ThemeProvider } from '@mui/material/styles'
import { DatePickerField } from '../../../components/framework/DatePickerField';
import * as Yup from "yup";
import { useAddExternalRatingMutation, useGetExternalRatingByIdQuery, useUpdateExternalRatingMutation } from "../../../features/appraisal/externalRatingApi";
import AutoSave from "../../../components/framework/AutoSave";
import { Formik, Form, FieldArray } from "formik";
import { RichTextField } from "../../../components/framework/RichTextField";
import { useAddMfiProfileMutation, useGetMfiProfileByIdQuery, useUpdateMfiProfileMutation } from "../../../features/appraisal/mfiProfileApi";
import AddCircleIcon from '@mui/icons-material/AddCircle';
interface Input {
  id: number
}

const myTheme = createTheme({
  // Set up your custom MUI theme here
})

const ExternalRating = ({ userData }: any) => {

  const [id, setId] = useState<any>(userData?.id);
  const { data: externalRatingData, isLoading } = useGetExternalRatingByIdQuery(id);
  const [addExternalRating] = useAddExternalRatingMutation();
  const [updateExternalRating] = useUpdateExternalRatingMutation();


  const { data: mfiProfileData, isLoading: isLoadingProfile } = useGetMfiProfileByIdQuery(id);
  const [addMfiProfile] = useAddMfiProfileMutation();
  const [updateMfiProfile] = useUpdateMfiProfileMutation();

  const initialValues = {
    ratings: [
      {
        id: "",
        applId: "12345",
        agencyName: "",
        instrument: "",
        amount: "",
        ratingDate: null,
        prevRating: "",
        prevratingDate: null,
        precPrevRating: "",
        precPrevRatingDate: null,
        externalRatingDesc: ""
      },
    ],
  };
  const validationSchema = Yup.object().shape({
    ratings: Yup.array().of(
      Yup.object().shape({
        agencyName: Yup.string().required("Required"),
        instrument: Yup.string().required("Required"),
        amount: Yup.number().typeError("Must be a number").required("Required"),
        rating: Yup.string().required("Required"),
        ratingDate: Yup.date().nullable().required("Required"),
      })
    ),
  });

  const handleSubmit = async (values: any) => {
    try {
      await updateExternalRating(values.ratings).unwrap();
    }
    catch (err) {
      console.error("Error saving data:", err);
    }
  };


  const profileHandleSubmit = async (values: any) => {
    try {
      console.log("values--> ", values);

      await updateMfiProfile(values).unwrap();

    } catch (err) {
      console.error("Error saving data:", err);
    }
  };

  const profileInitialValues = {
    applId: "12345",
    covenantBreach: "",
    pendingComl: "",
    detailsOfGroup: "",
    compDetails: "",
    extRatHoldComp: "",
    taggedRating: "",
    lowestRating: "",
    ratingMovement: "",
    strength: "",
    weakness: "",
    weaknessComments: "",
    upwardFactors: "",
    downwardFactors: "",
    downFactorsComments: "",
    intRatingComments: "",
    saveStatus: "",
    ratingExtract: "",
    mfiGrading: "",
    mfiCoca: ""
  }




  if (isLoading) return <h6>Loading... </h6>;

  return (
    <>
      <div className='custome-form'>

        <Formik
          initialValues={externalRatingData || initialValues}
          // validationSchema={validationSchema}
          onSubmit={handleSubmit}
          validateOnChange={false}
          validateOnBlur={true}
        // enableReinitialize={true}
        >
          {({ values }) => (
            <Form>
              <AutoSave debounceMs={1000} />
              <FieldArray name="ratings">
                {({ push, remove }) => (
                  <div className="wrap-inner-table">
                    <Table sx={{ minWidth: 650 }} aria-label="external ratings table">
                      <TableHead>
                        <TableRow>
                          <TableCell><b>Name of Rating Agency</b></TableCell>
                          <TableCell><b>Instrument</b></TableCell>
                          <TableCell><b>Amount (Rs Cr)</b></TableCell>
                          <TableCell><b>Rating</b></TableCell>
                          <TableCell><b>Date of Rating</b></TableCell>
                          <TableCell><b>Previous Rating</b></TableCell>
                          <TableCell><b>Date of Previous Rating</b></TableCell>
                          <TableCell><b>Preceding Previous Rating</b></TableCell>
                          <TableCell><b>Date of Rating Preceding Previous Rating</b></TableCell>
                          <TableCell>
                            <IconButton className="py-0 addOnBtn"
                              color="primary" onClick={() => push(initialValues.ratings[0])}>
                              <AddCircleIcon />
                            </IconButton>
                          </TableCell>
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        {values.ratings.map((_: unknown, index: number) => (
                          <TableRow key={index}>
                            <TableCell>
                              <TextBoxField label="" name={`ratings.${index}.agencyName`} />
                            </TableCell>
                            <TableCell>
                              <TextBoxField label="" name={`ratings.${index}.instrument`} />
                            </TableCell>
                            <TableCell>
                              <TextBoxField label="" name={`ratings.${index}.amount`} />
                            </TableCell>
                            <TableCell>
                              <TextBoxField label="" name={`ratings.${index}.externalRatingDesc`} />
                            </TableCell>
                            <TableCell>
                              <DatePickerField label="" name={`ratings.${index}.ratingDate`} />
                            </TableCell>
                            <TableCell>
                              <TextBoxField label="" name={`ratings.${index}.prevRating`} />
                            </TableCell>
                            <TableCell>
                              <DatePickerField label="" name={`ratings.${index}.prevratingDate`} />
                            </TableCell>
                            <TableCell>
                              <TextBoxField label="" name={`ratings.${index}.precPrevRating`} />
                            </TableCell>
                            <TableCell>
                              <DatePickerField label="" name={`ratings.${index}.precPrevRatingDate`} />
                            </TableCell>
                            <TableCell>
                              <IconButton aria-label="delete" color="error" onClick={() => remove(index)} disabled={values.ratings.length === 1}>
                                <DeleteIcon />
                              </IconButton>
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </div>
                )}
              </FieldArray>
            </Form>
          )}
        </Formik>

        <Formik
          initialValues={mfiProfileData || profileInitialValues}
          // validationSchema={validationSchema}
          onSubmit={profileHandleSubmit}
          // enableReinitialize
          validateOnChange={false}
          validateOnBlur={true}
          enableReinitialize={false}
        >
          {({ values }) => (
            <Form>
              <AutoSave debounceMs={1000} />
              <div className="wrap-inner-table">
                <Table sx={{ minWidth: 650 }} aria-label="simple table">
                  <TableHead>
                    <TableRow>
                      <TableCell><b>Tagged Rating</b></TableCell>
                      <TableCell><b>Lowest Rating</b></TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    <TableRow>
                      <TableCell>
                        <FormControl fullWidth>
                          <TextBoxField label="" name="taggedRating" />
                        </FormControl>
                      </TableCell>
                      <TableCell>
                        <FormControl fullWidth>
                          <TextBoxField label="" name="lowestRating" />
                        </FormControl>
                      </TableCell>
                    </TableRow>
                  </TableBody>
                </Table>
              </div>

              <div className="wrap-inner-table">
                <Table sx={{ minWidth: 650 }} aria-label="simple table">
                  <TableHead>
                    <TableRow>
                      <TableCell><b>Grading for MFI</b></TableCell>
                      <TableCell><b>COCO for MFI</b></TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    <TableRow>
                      <TableCell>
                        <FormControl fullWidth>
                          <TextBoxField label="" name="mfiGrading" />
                        </FormControl>
                      </TableCell>
                      <TableCell>
                        <FormControl fullWidth>
                          <TextBoxField label="" name="mfiCoca" />
                        </FormControl>
                      </TableCell>
                    </TableRow>
                  </TableBody>
                </Table>
              </div>

              <Grid spacing={2} padding={4} container className='form-grid'>
                <Grid item xs={12} sm={6} md={3} lg={3}>
                  External Credit Rating of Holding Company
                </Grid>
                <Grid item xs={12} sm={6} md={9} lg={9}>
                  <TextBoxField
                    label="External Credit Rating of Holding Company"
                    name="extRatHoldComp"
                  />
                </Grid>
              </Grid>

              <Grid spacing={2} padding={4} container className='form-grid'>
                <Grid item xs={12} sm={6} md={3} lg={3}>
                  Rating Movement in last 3 years
                </Grid>
                <Grid item xs={12} sm={6} md={3} lg={9}>
                  <TextBoxField label="Rating Movement in last 3 years" name="ratingMovement" />
                </Grid>
              </Grid>

              <div className="wrap-inner-table">
                <Table sx={{ minWidth: 650 }} aria-label="simple table">
                  <TableHead>
                    <TableRow>
                      <TableCell><b>Strength</b></TableCell>
                      <TableCell><b>Weakness</b></TableCell>
                      <TableCell><b>Comments on Weaknesses</b></TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    <TableRow>
                      <TableCell>
                        <div className="wrap-richtext">
                          <RichTextField label="" name="strength" />
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="wrap-richtext">
                          <RichTextField label="" name="weakness" />
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="wrap-richtext">
                          <RichTextField label="" name="weaknessComments" />
                        </div>
                      </TableCell>
                    </TableRow>
                  </TableBody>
                </Table>
              </div>

              <Grid spacing={2} padding={4} container className='form-grid'>
                <Grid item xs={12} sm={6} md={3} lg={12}>
                  <b>Rating Sensitivity Factors</b>
                </Grid>
                <Grid item xs={12} sm={12} md={12} lg={12}>
                  <div className="wrap-inner-table mt-0">
                    <Table sx={{ minWidth: 650 }} aria-label="simple table">
                      <TableHead>
                        <TableRow>
                          <TableCell><b>Upward Factors</b></TableCell>
                          <TableCell><b>Downward Factors</b></TableCell>
                          <TableCell><b>Comments on Downward Factors</b></TableCell>
                        </TableRow>
                      </TableHead>
                      <TableBody>
                        <TableRow>
                          <TableCell>
                            <div className="wrap-richtext">
                              <RichTextField label="" name="upwardFactors" />
                            </div>
                          </TableCell>
                          <TableCell>
                            <div className="wrap-richtext">
                              <RichTextField label="" name="downwardFactors" />
                            </div>
                          </TableCell>
                          <TableCell>
                            <div className="wrap-richtext">
                              <RichTextField label="" name="downFactorsComments" />
                            </div>
                          </TableCell>
                        </TableRow>
                      </TableBody>
                    </Table>
                  </div>
                </Grid>
              </Grid>
            </Form>
          )}
        </Formik>
      </div >
    </>
  )
}

export default ExternalRating;



import { FormControl, Grid, IconButton, Table, TableBody, TableCell, TableHead, TableRow, TextField } from "@mui/material"

import DeleteIcon from '@mui/icons-material/Delete';
import { AdapterDayjs } from '@mui/x-date-pickers/AdapterDayjs';
import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
import { DatePicker } from '@mui/x-date-pickers/DatePicker';
import { SyntheticEvent, useEffect, useRef, useState } from "react";
import AddCircleIcon from '@mui/icons-material/AddCircle';

interface Input {
  id: number
}

const InternalRating = () => {
  const [inputs, setInputs] = useState<Input[]>([
    {
      id: 1
    }
  ])
  const textRef1 = useRef<any>();

  const handleAddFields = () => {
    const newInputs = [...inputs, { id: inputs.length + 1 }]
    setInputs(newInputs);
  }

  const handleDeleteFields = () => {
    if (inputs.length >= 2) {
      const newInputs = inputs.slice(0, -1);
      setInputs(newInputs);
    } else if (inputs.length > 1) {
      return
    }
  }

  const onChangeHandler = function (e: SyntheticEvent, refName: any) {
    const target = e.target as HTMLTextAreaElement;
    refName.current.style.height = "60px";
    refName.current.style.height = `${target.scrollHeight}px`;
  };

  useEffect(() => {
    textRef1.current.style.height = "60px";
  }, []);

  return (
    <>
      <div className='custome-form'>
        <div className="wrap-inner-table">
          <Table sx={{ minWidth: 650 }} aria-label="simple table">
            <TableHead>
              <TableRow>
                <TableCell><b>Financial Year</b></TableCell>
                <TableCell><b>Date of Finalized RAM Rrating  </b></TableCell>
                <TableCell><b>Score</b></TableCell>
                <TableCell><b>Rating</b></TableCell>
                <TableCell width={20}>
                  <IconButton className="py-0 addOnBtn"
                    color="primary" onClick={handleAddFields}>
                    <AddCircleIcon />
                  </IconButton>
                </TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {inputs.map((input: any) => (
                <TableRow>
                  <TableCell>
                    <FormControl fullWidth>
                      <TextField label="Financial Year" size="small" type="text" />
                    </FormControl>
                  </TableCell>
                  <TableCell>
                    <LocalizationProvider dateAdapter={AdapterDayjs}>
                      <DatePicker slotProps={{ textField: { size: 'small' } }} />
                    </LocalizationProvider>
                  </TableCell>
                  <TableCell>
                    <FormControl fullWidth>
                      <TextField label="Score" size="small" type="text" />
                    </FormControl>
                  </TableCell>
                  <TableCell>
                    <FormControl fullWidth>
                      <TextField label="Rating" size="small" type="text" />
                    </FormControl>
                  </TableCell>
                  <TableCell>
                    <IconButton aria-label="delete" color="error" onClick={handleDeleteFields}>
                      <DeleteIcon />
                    </IconButton>
                  </TableCell>
                </TableRow>
              ))
              }
            </TableBody>
          </Table>
        </div>
        <Grid
          spacing={2}
          padding={4}
          container
          className='form-grid'
        >
        <Grid item xs={12} sm={12} md={12} lg={12}>
          <FormControl fullWidth>
            <textarea
              placeholder="Any Comments"
              ref={textRef1}
              className="text-area-box"
              onChange={(event: any) => onChangeHandler(event, textRef1)}
            />
          </FormControl>
        </Grid>
        </Grid>
      </div >
    </>
  )
}

export default InternalRating;

Api Body [
  {
    "applId": "string",
    "intRatingFY": "string",
    "intRatingDate": "2024-07-29T06:53:02.967Z",
    "intRatingScore": "string",
    "intRating": "string",
    "id": 0,
    "status": "string"
  }
]
